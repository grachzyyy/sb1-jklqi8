from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import asyncio
from config import TOKEN, KASPI_PAYMENT_LINK, REVIEW_CHANNEL, CONSULTATION_PRICE
from doctors import doctors

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Doctor Chat!\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.\n\n"
        "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å - –Ω–∞—à–∏ –¥–æ–∫—Ç–æ—Ä–∞ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã "
        "–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Ä—É—à–∞—é—Ç –≤—Ä–∞—á–µ–±–Ω—É—é —Ç–∞–π–Ω—É."
    )
    
    keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞", callback_data="choose_doctor")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def choose_doctor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = []
    for doctor_name in doctors.keys():
        keyboard.append([InlineKeyboardButton(doctor_name, callback_data=f"doctor_{doctor_name}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Here you would send doctor images
    for doctor_name, doctor_info in doctors.items():
        # In a real implementation, you would use:
        # await query.message.reply_photo(photo=open(doctor_info['image'], 'rb'))
        pass
    
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=reply_markup)

async def doctor_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    doctor_name = query.data.replace("doctor_", "")
    payment_message = (
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ —Å –≤—Ä–∞—á–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {CONSULTATION_PRICE} —Ç–≥\n\n"
        f"–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
    )
    
    keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=KASPI_PAYMENT_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(payment_message, reply_markup=reply_markup)

async def payment_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # In a real implementation, you would verify the payment
    success_message = (
        "‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω!\n\n"
        "‚ùóÔ∏è–§–æ—Ä–º–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n"
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (—Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ –æ—Ç –º–∏–Ω—É—Ç—ã –¥–æ 2-—Ö —á–∞—Å–æ–≤) "
        "–≤ –ø–æ—Ä—è–¥–∫–µ ¬´–æ–Ω–ª–∞–π–Ω –∂–∏–≤–∞—è –æ—á–µ—Ä–µ–¥—å¬ª —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞—à–µ–≥–æ –≤—Ä–∞—á–∞.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ "
        "(–∞–Ω–∞–ª–∏–∑—ã, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–Ω–∏–º–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ —Ç.–¥.)"
    )
    
    doctor_link = doctors[context.user_data['selected_doctor']]['chat_link']
    keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", url=doctor_link)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(success_message, reply_markup=reply_markup)

async def end_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    end_message = (
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Doctor Chat!\n\n"
        "üåü –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –æ—Ç–∑—ã–≤–æ–≤.\n"
        "üíé –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 50% –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 2 –º–µ—Å—è—Ü–∞)!"
    )
    
    keyboard = [[InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url=REVIEW_CHANNEL)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(end_message, reply_markup=reply_markup)

async def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(choose_doctor, pattern="^choose_doctor$"))
    application.add_handler(CallbackQueryHandler(doctor_selected, pattern="^doctor_"))
    
    await application.initialize()
    await application.start()
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())